// Â∏ÅÂÆâÈáèÂåñ‰∫§ÊòìÁõëÊéß - ÂâçÁ´ØJavaScript

class TradingMonitor {
    constructor() {
        this.socket = null;
        this.isConnected = false;
        this.isMonitoring = false;
        this.lastSignals = [];

        this.init();
    }

    init() {
        this.initializeSocket();
        this.bindEvents();
        this.updateUI();
    }

    initializeSocket() {
        try {
            // ÂàùÂßãÂåñSocket.IOËøûÊé•
            this.socket = io();

            // ËøûÊé•‰∫ã‰ª∂
            this.socket.on('connect', () => {
                this.isConnected = true;
                this.updateConnectionStatus(true);
                this.addLog('‚úÖ ÊúçÂä°Âô®ËøûÊé•ÊàêÂäü', 'success');
            });

            // Êñ≠ÂºÄËøûÊé•‰∫ã‰ª∂
            this.socket.on('disconnect', () => {
                this.isConnected = false;
                this.updateConnectionStatus(false);
                this.addLog('‚ùå ÊúçÂä°Âô®ËøûÊé•Êñ≠ÂºÄ', 'error');
            });

            // Áä∂ÊÄÅÊõ¥Êñ∞
            this.socket.on('status', (data) => {
                this.handleStatusUpdate(data);
            });

            // Â∏ÇÂú∫Êï∞ÊçÆÊõ¥Êñ∞
            this.socket.on('market_update', (data) => {
                this.handleMarketUpdate(data);
            });

        } catch (error) {
            console.error('SocketÂàùÂßãÂåñÂ§±Ë¥•:', error);
            this.addLog('‚ùå SocketÂàùÂßãÂåñÂ§±Ë¥•: ' + error.message, 'error');
        }
    }

    bindEvents() {
        // ÂºÄÂßãÁõëÊéßÊåâÈíÆ
        document.getElementById('start-btn').addEventListener('click', () => {
            this.startMonitoring();
        });

        // ÂÅúÊ≠¢ÁõëÊéßÊåâÈíÆ
        document.getElementById('stop-btn').addEventListener('click', () => {
            this.stopMonitoring();
        });

        // Âà∑Êñ∞Êï∞ÊçÆÊåâÈíÆ
        document.getElementById('refresh-btn').addEventListener('click', () => {
            this.refreshData();
        });

        // Ê∏ÖÁ©∫Êó•ÂøóÊåâÈíÆ
        document.getElementById('clear-log-btn').addEventListener('click', () => {
            this.clearLog();
        });

        // ËÆæÁΩÆÊåâÈíÆ
        document.getElementById('settings-btn').addEventListener('click', () => {
            this.openSettingsModal();
        });

        // Ê®°ÊÄÅÊ°Ü‰∫ã‰ª∂
        document.getElementById('close-modal').addEventListener('click', () => {
            this.closeSettingsModal();
        });

        document.getElementById('cancel-settings-btn').addEventListener('click', () => {
            this.closeSettingsModal();
        });

        document.getElementById('save-settings-btn').addEventListener('click', () => {
            this.saveSettings();
        });

        document.getElementById('load-default-btn').addEventListener('click', () => {
            this.loadDefaultSettings();
        });

        // ÁÇπÂáªÊ®°ÊÄÅÊ°ÜÂ§ñÈÉ®ÂÖ≥Èó≠
        window.addEventListener('click', (event) => {
            const modal = document.getElementById('settings-modal');
            if (event.target === modal) {
                this.closeSettingsModal();
            }
        });
    }

    startMonitoring() {
        if (this.isConnected && !this.isMonitoring) {
            this.socket.emit('start_monitoring');
            this.addLog('üöÄ ÂºÄÂßãÁõëÊéß...', 'info');
        } else if (!this.isConnected) {
            this.addLog('‚ùå Êú™ËøûÊé•Âà∞ÊúçÂä°Âô®', 'error');
        }
    }

    stopMonitoring() {
        if (this.isConnected && this.isMonitoring) {
            this.socket.emit('stop_monitoring');
            this.addLog('‚èπÔ∏è ÂÅúÊ≠¢ÁõëÊéß...', 'info');
        }
    }

    refreshData() {
        if (this.isConnected) {
            // ÈÄöËøáAPIËé∑ÂèñÂΩìÂâçÊï∞ÊçÆ
            fetch('/api/data')
                .then(response => response.json())
                .then(data => {
                    this.handleMarketUpdate(data);
                    this.addLog('üîÑ Êï∞ÊçÆÂ∑≤Âà∑Êñ∞', 'info');
                })
                .catch(error => {
                    this.addLog('‚ùå Êï∞ÊçÆÂà∑Êñ∞Â§±Ë¥•: ' + error.message, 'error');
                });
        } else {
            this.addLog('‚ùå Êú™ËøûÊé•Âà∞ÊúçÂä°Âô®', 'error');
        }
    }

    handleStatusUpdate(data) {
        this.isMonitoring = data.monitoring_active;
        this.updateMonitoringStatus(this.isMonitoring);

        if (data.message) {
            this.addLog('üìã ' + data.message, 'info');
        }
    }

    handleMarketUpdate(data) {
        try {
            // Êõ¥Êñ∞Êó∂Èó¥Êà≥
            if (data.timestamp) {
                document.getElementById('last-update').textContent = data.timestamp;
            }

            // Êõ¥Êñ∞BTCÊï∞ÊçÆ
            if (data.btc) {
                this.updateBTCData(data.btc);
            }

            // Êõ¥Êñ∞DOGEÊï∞ÊçÆ
            if (data.doge) {
                this.updateDOGEData(data.doge);
            }

            // Êõ¥Êñ∞‰ø°Âè∑
            if (data.signals) {
                this.updateSignals(data.signals);
            }

            // ËÆ∞ÂΩïÊõ¥Êñ∞Êó•Âøó
            this.addLog(`üìä Êï∞ÊçÆÊõ¥Êñ∞ - BTC: $${data.btc?.price?.toLocaleString() || 'N/A'}, DOGE: $${data.doge?.price?.toFixed(6) || 'N/A'}`, 'info');

        } catch (error) {
            console.error('Â§ÑÁêÜÂ∏ÇÂú∫Êï∞ÊçÆÂ§±Ë¥•:', error);
            this.addLog('‚ùå Êï∞ÊçÆÂ§ÑÁêÜÂ§±Ë¥•: ' + error.message, 'error');
        }
    }

    updateBTCData(btcData) {
        try {
            // Êõ¥Êñ∞‰ª∑Ê†º
            if (btcData.price !== undefined) {
                document.getElementById('btc-price').textContent = btcData.price.toLocaleString('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }

            // Êõ¥Êñ∞Ê∂®Ë∑åÂπÖ
            if (btcData.change_percent !== undefined) {
                const changeElement = document.getElementById('btc-change');
                const changeValue = btcData.change_percent;

                changeElement.textContent = (changeValue > 0 ? '+' : '') + changeValue.toFixed(2) + '%';
                changeElement.className = 'change ' + (changeValue >= 0 ? 'positive' : 'negative');
            }

            // Êõ¥Êñ∞Êù°‰ª∂Áä∂ÊÄÅ
            if (btcData.conditions) {
                const statusElement = document.getElementById('btc-condition-status');
                statusElement.textContent = btcData.valid ? '‚úÖ Êª°Ë∂≥' : '‚ùå ‰∏çÊª°Ë∂≥';
                statusElement.className = 'condition-status ' + (btcData.valid ? 'satisfied' : 'not-satisfied');

                // Êõ¥Êñ∞ËØ¶ÁªÜÊï∞ÊçÆ
                if (btcData.conditions['24h_conditions']) {
                    const volatility = btcData.conditions['24h_conditions'].volatility;
                    if (volatility !== undefined) {
                        document.getElementById('btc-volatility').textContent = (volatility * 100).toFixed(2) + '%';
                    }
                }

                if (btcData.conditions['kdj_conditions']) {
                    const kdj4h = btcData.conditions['kdj_conditions'].kdj_4h;
                    const kdj1h = btcData.conditions['kdj_conditions'].kdj_1h;

                    // Ëøô‰∫õKDJÂÄºÊòØÊóßÁöÑÊòæÁ§∫ÊñπÂºèÔºåÁé∞Âú®‰ΩøÁî®ËØ¶ÁªÜÁöÑindicatorsÊï∞ÊçÆ
                    // ÊöÇÊó∂Ê≥®ÈáäÊéâÔºåÈÅøÂÖçÈîôËØØ
                    /*
                    if (kdj4h !== undefined) {
                        document.getElementById('btc-kdj-4h').textContent = kdj4h.toFixed(1);
                    }
                    if (kdj1h !== undefined) {
                        document.getElementById('btc-kdj-1h').textContent = kdj1h.toFixed(1);
                    }
                    */
                }
            }

            // Êõ¥Êñ∞ËØ¶ÁªÜÊäÄÊúØÊåáÊ†á
            if (btcData.indicators) {
                this.updateBTCIndicators(btcData.indicators);
            }

        } catch (error) {
            console.error('Êõ¥Êñ∞BTCÊï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    updateBTCIndicators(indicators) {
        try {
            // Êõ¥Êñ∞Â∏ÇÂú∫ÁªüËÆ°
            if (indicators.market_stats) {
                const stats = indicators.market_stats;

                if (stats.amplitude_24h !== undefined) {
                    document.getElementById('btc-volatility').textContent = stats.amplitude_24h.toFixed(3) + '%';
                }
                if (stats.growth_24h !== undefined) {
                    document.getElementById('btc-growth').textContent = (stats.growth_24h > 0 ? '+' : '') + stats.growth_24h.toFixed(3) + '%';
                }
            }

            // Êõ¥Êñ∞4Â∞èÊó∂BOLLÊåáÊ†á
            if (indicators.boll_4h) {
                const boll4h = indicators.boll_4h;
                document.getElementById('btc-boll-4h-upper').textContent = '$' + boll4h.upper.toLocaleString();
                document.getElementById('btc-boll-4h-middle').textContent = '$' + boll4h.middle.toLocaleString();
                document.getElementById('btc-boll-4h-lower').textContent = '$' + boll4h.lower.toLocaleString();
            }

            // Êõ¥Êñ∞4Â∞èÊó∂KDJÊåáÊ†á
            if (indicators.kdj_4h) {
                const kdj4h = indicators.kdj_4h;
                document.getElementById('btc-kdj-4h-k').textContent = kdj4h.k.toFixed(2);
                document.getElementById('btc-kdj-4h-d').textContent = kdj4h.d.toFixed(2);
                document.getElementById('btc-kdj-4h-j').textContent = kdj4h.j.toFixed(2);
            }

            // Êõ¥Êñ∞1Â∞èÊó∂BOLLÊåáÊ†á
            if (indicators.boll_1h) {
                const boll1h = indicators.boll_1h;
                document.getElementById('btc-boll-1h-upper').textContent = '$' + boll1h.upper.toLocaleString();
                document.getElementById('btc-boll-1h-middle').textContent = '$' + boll1h.middle.toLocaleString();
                document.getElementById('btc-boll-1h-lower').textContent = '$' + boll1h.lower.toLocaleString();
            }

            // Êõ¥Êñ∞1Â∞èÊó∂KDJÊåáÊ†á
            if (indicators.kdj_1h) {
                const kdj1h = indicators.kdj_1h;
                document.getElementById('btc-kdj-1h-k').textContent = kdj1h.k.toFixed(2);
                document.getElementById('btc-kdj-1h-d').textContent = kdj1h.d.toFixed(2);
                document.getElementById('btc-kdj-1h-j').textContent = kdj1h.j.toFixed(2);
            }

        } catch (error) {
            console.error('Êõ¥Êñ∞BTCÊåáÊ†áÂ§±Ë¥•:', error);
        }
    }

    updateDOGEData(dogeData) {
        try {
            // Êõ¥Êñ∞‰ª∑Ê†º
            if (dogeData.price !== undefined) {
                document.getElementById('doge-price').textContent = dogeData.price.toFixed(6);
            }

            // Êõ¥Êñ∞Ê∂®Ë∑åÂπÖ
            if (dogeData.change_percent !== undefined) {
                const changeElement = document.getElementById('doge-change');
                const changeValue = dogeData.change_percent;

                changeElement.textContent = (changeValue > 0 ? '+' : '') + changeValue.toFixed(2) + '%';
                changeElement.className = 'change ' + (changeValue >= 0 ? 'positive' : 'negative');
            }

            // Êõ¥Êñ∞ËØ¶ÁªÜÊäÄÊúØÊåáÊ†á
            if (dogeData.indicators) {
                this.updateDOGEIndicators(dogeData.indicators);
            }

        } catch (error) {
            console.error('Êõ¥Êñ∞DOGEÊï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    updateDOGEIndicators(indicators) {
        try {
            // Êõ¥Êñ∞Â∏ÇÂú∫ÁªüËÆ°
            if (indicators.market_stats) {
                const stats = indicators.market_stats;

                if (stats.amplitude_24h !== undefined) {
                    document.getElementById('doge-volatility').textContent = stats.amplitude_24h.toFixed(3) + '%';
                }
                if (stats.growth_24h !== undefined) {
                    document.getElementById('doge-growth').textContent = (stats.growth_24h > 0 ? '+' : '') + stats.growth_24h.toFixed(3) + '%';
                }
            }

            // Êõ¥Êñ∞1Â∞èÊó∂BOLLÊåáÊ†á
            if (indicators.boll_1h) {
                const boll1h = indicators.boll_1h;
                document.getElementById('doge-boll-1h-upper').textContent = '$' + boll1h.upper.toFixed(6);
                document.getElementById('doge-boll-1h-middle').textContent = '$' + boll1h.middle.toFixed(6);
                document.getElementById('doge-boll-1h-lower').textContent = '$' + boll1h.lower.toFixed(6);
            }

            // Êõ¥Êñ∞1Â∞èÊó∂KDJÊåáÊ†á
            if (indicators.kdj_1h) {
                const kdj1h = indicators.kdj_1h;
                document.getElementById('doge-kdj-1h-k').textContent = kdj1h.k.toFixed(2);
                document.getElementById('doge-kdj-1h-d').textContent = kdj1h.d.toFixed(2);
                document.getElementById('doge-kdj-1h-j').textContent = kdj1h.j.toFixed(2);

                // Ê∑ªÂä†È¢úËâ≤ÊåáÁ§∫
                this.setKDJColor('doge-kdj-1h-k', kdj1h.k);
                this.setKDJColor('doge-kdj-1h-d', kdj1h.d);
                this.setKDJColor('doge-kdj-1h-j', kdj1h.j);
            }

            // Êõ¥Êñ∞15ÂàÜÈíüBOLLÊåáÊ†á
            if (indicators.boll_15m) {
                const boll15m = indicators.boll_15m;
                document.getElementById('doge-boll-15m-upper').textContent = '$' + boll15m.upper.toFixed(6);
                document.getElementById('doge-boll-15m-middle').textContent = '$' + boll15m.middle.toFixed(6);
                document.getElementById('doge-boll-15m-lower').textContent = '$' + boll15m.lower.toFixed(6);
            }

            // Êõ¥Êñ∞15ÂàÜÈíüKDJÊåáÊ†á
            if (indicators.kdj_15m) {
                const kdj15m = indicators.kdj_15m;
                document.getElementById('doge-kdj-15m-k').textContent = kdj15m.k.toFixed(2);
                document.getElementById('doge-kdj-15m-d').textContent = kdj15m.d.toFixed(2);
                document.getElementById('doge-kdj-15m-j').textContent = kdj15m.j.toFixed(2);

                // Ê∑ªÂä†È¢úËâ≤ÊåáÁ§∫
                this.setKDJColor('doge-kdj-15m-k', kdj15m.k);
                this.setKDJColor('doge-kdj-15m-d', kdj15m.d);
                this.setKDJColor('doge-kdj-15m-j', kdj15m.j);
            }

            // Êõ¥Êñ∞1ÂàÜÈíüBOLLÊåáÊ†á
            if (indicators.boll_1m) {
                const boll1m = indicators.boll_1m;
                document.getElementById('doge-boll-1m-upper').textContent = '$' + boll1m.upper.toFixed(6);
                document.getElementById('doge-boll-1m-middle').textContent = '$' + boll1m.middle.toFixed(6);
                document.getElementById('doge-boll-1m-lower').textContent = '$' + boll1m.lower.toFixed(6);
            }

            // Êõ¥Êñ∞1ÂàÜÈíüKDJÊåáÊ†á
            if (indicators.kdj_1m) {
                const kdj1m = indicators.kdj_1m;
                document.getElementById('doge-kdj-1m-k').textContent = kdj1m.k.toFixed(2);
                document.getElementById('doge-kdj-1m-d').textContent = kdj1m.d.toFixed(2);
                document.getElementById('doge-kdj-1m-j').textContent = kdj1m.j.toFixed(2);

                // Ê∑ªÂä†È¢úËâ≤ÊåáÁ§∫
                this.setKDJColor('doge-kdj-1m-k', kdj1m.k);
                this.setKDJColor('doge-kdj-1m-d', kdj1m.d);
                this.setKDJColor('doge-kdj-1m-j', kdj1m.j);
            }

        } catch (error) {
            console.error('Êõ¥Êñ∞DOGEÊåáÊ†áÂ§±Ë¥•:', error);
        }
    }

    setKDJColor(elementId, value) {
        const element = document.getElementById(elementId);
        if (!element) return;

        // ÁßªÈô§Áé∞ÊúâÁöÑÈ¢úËâ≤Á±ª
        element.classList.remove('indicator-value', 'oversold', 'overbought', 'neutral');

        // Ê∑ªÂä†Âü∫Á°ÄÁ±ª
        element.classList.add('indicator-value');

        // Ê†πÊçÆKDJÂÄºËÆæÁΩÆÈ¢úËâ≤
        if (value <= 20) {
            element.classList.add('oversold');  // Ë∂ÖÂçñ - ÁªøËâ≤
        } else if (value >= 80) {
            element.classList.add('overbought');  // Ë∂Ö‰π∞ - Á∫¢Ëâ≤
        } else {
            element.classList.add('neutral');  // ‰∏≠ÊÄß - Ê©ôËâ≤
        }
    }

    updateSignals(signalsData) {
        try {
            // Êõ¥Êñ∞‰ø°Âè∑ËÆ°Êï∞
            const count = signalsData.count || 0;
            document.getElementById('signal-count').textContent = count;

            // Êõ¥Êñ∞‰ø°Âè∑ÂàóË°®
            const signalList = document.getElementById('signal-list');

            if (count === 0) {
                signalList.innerHTML = '<p class="no-signals">ÊöÇÊó†‰ø°Âè∑</p>';
            } else {
                let signalsHtml = '';

                signalsData.list.forEach((signal, index) => {
                    const signalType = signal.type || 'unknown';
                    const signalId = signal.signal_id || index + 1;
                    const timestamp = new Date().toLocaleTimeString();

                    signalsHtml += `
                        <div class="signal-item ${signalType} new">
                            <div class="signal-header">
                                ${signalType === 'buy' ? 'üü¢ ‰π∞ÂÖ•‰ø°Âè∑' : 'üî¥ ÂçñÂá∫‰ø°Âè∑'} ${signalId}
                            </div>
                            <div class="signal-time">${timestamp}</div>
                        </div>
                    `;
                });

                signalList.innerHTML = signalsHtml;

                // Ê£ÄÊü•ÊòØÂê¶ÊúâÊñ∞‰ø°Âè∑
                if (signalsData.list.length > this.lastSignals.length) {
                    this.addLog(`üö® Êñ∞‰ø°Âè∑Ëß¶Âèë! ÂΩìÂâçÊúâ ${count} ‰∏™‰ø°Âè∑`, 'success');

                    // ÂèØ‰ª•Ê∑ªÂä†Â£∞Èü≥ÊèêÈÜí
                    this.playNotificationSound();
                }

                this.lastSignals = signalsData.list;
            }

        } catch (error) {
            console.error('Êõ¥Êñ∞‰ø°Âè∑Êï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    updateConnectionStatus(connected) {
        const statusElement = document.getElementById('connection-status');
        statusElement.textContent = connected ? 'Â∑≤ËøûÊé•' : 'Êú™ËøûÊé•';
        statusElement.className = 'status ' + (connected ? 'connected' : 'disconnected');
    }

    updateMonitoringStatus(monitoring) {
        const statusElement = document.getElementById('monitoring-status');
        statusElement.textContent = monitoring ? 'ÁõëÊéß‰∏≠' : 'Â∑≤ÂÅúÊ≠¢';
        statusElement.className = 'status ' + (monitoring ? 'running' : 'stopped');
    }

    updateUI() {
        // ÂàùÂßãÂåñUIÁä∂ÊÄÅ
        this.updateConnectionStatus(false);
        this.updateMonitoringStatus(false);

        // ÊòæÁ§∫ÂàùÂßãÊó•Âøó
        this.addLog('üíª Á≥ªÁªüÂàùÂßãÂåñÂÆåÊàê', 'info');
        this.addLog('üîå Ê≠£Âú®ËøûÊé•ÊúçÂä°Âô®...', 'info');
    }

    addLog(message, type = 'info') {
        const logContent = document.getElementById('log-content');
        const timestamp = new Date().toLocaleTimeString();

        const logEntry = document.createElement('p');
        logEntry.className = `log-entry ${type}`;
        logEntry.textContent = `[${timestamp}] ${message}`;

        logContent.appendChild(logEntry);

        // ‰øùÊåÅÊªöÂä®Âà∞Â∫ïÈÉ®
        logContent.scrollTop = logContent.scrollHeight;

        // ÈôêÂà∂Êó•ÂøóÊù°Êï∞Ôºà‰øùÁïôÊúÄÊñ∞100Êù°Ôºâ
        const entries = logContent.getElementsByClassName('log-entry');
        if (entries.length > 100) {
            logContent.removeChild(entries[0]);
        }
    }

    clearLog() {
        const logContent = document.getElementById('log-content');
        logContent.innerHTML = '';
        this.addLog('üìù Êó•ÂøóÂ∑≤Ê∏ÖÁ©∫', 'info');
    }

    playNotificationSound() {
        // ÁÆÄÂçïÁöÑÊèêÁ§∫Èü≥ÔºàÂèØÈÄâÔºâ
        try {
            const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEaBDmr5fO6eSwGJXzH7NaJOQgZaLvr45xNEwtLpe3Zo2AcBzwEFgAA');
            audio.volume = 0.3;
            audio.play().catch(() => {
                // ÂøΩÁï•Êí≠ÊîæÂ§±Ë¥•
            });
        } catch (error) {
            // ÂøΩÁï•Èü≥È¢ëÈîôËØØ
        }
    }

    // ËÆæÁΩÆÁõ∏ÂÖ≥ÊñπÊ≥ï
    openSettingsModal() {
        // Âä†ËΩΩÂΩìÂâçËÆæÁΩÆ
        this.loadCurrentSettings();

        // ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
        document.getElementById('settings-modal').style.display = 'block';

        this.addLog('‚öôÔ∏è ÊâìÂºÄÁ≠ñÁï•ËÆæÁΩÆ', 'info');
    }

    closeSettingsModal() {
        document.getElementById('settings-modal').style.display = 'none';
    }

    loadCurrentSettings() {
        // ‰ªéÊúçÂä°Âô®Ëé∑ÂèñÂΩìÂâçËÆæÁΩÆ
        fetch('/api/settings')
            .then(response => response.json())
            .then(settings => {
                this.populateSettingsForm(settings);
            })
            .catch(error => {
                this.addLog('‚ùå Âä†ËΩΩËÆæÁΩÆÂ§±Ë¥•: ' + error.message, 'error');
            });
    }

    populateSettingsForm(settings) {
        try {
            // BTCÊù°‰ª∂ËÆæÁΩÆ
            if (settings.btc_conditions) {
                document.getElementById('volatility-threshold').value = (settings.btc_conditions.volatility_threshold * 100).toFixed(2);
                document.getElementById('growth-threshold').value = (settings.btc_conditions.growth_threshold * 100).toFixed(2);
                document.getElementById('kdj-threshold').value = settings.btc_conditions.kdj_threshold;
            }

            // DOGE‰ø°Âè∑ËÆæÁΩÆ
            if (settings.doge_thresholds) {
                const oversold = settings.doge_thresholds.oversold || [10, 15, 20, 20];
                document.getElementById('oversold-1').value = oversold[0] || 10;
                document.getElementById('oversold-2').value = oversold[1] || 15;
                document.getElementById('oversold-3').value = oversold[2] || 20;
                document.getElementById('oversold-4').value = oversold[3] || 20;
                document.getElementById('overbought').value = settings.doge_thresholds.overbought || 90;
            }

            // ÁõëÊéßËÆæÁΩÆ
            if (settings.monitoring) {
                document.getElementById('update-interval').value = settings.monitoring.update_interval || 5;
            }

        } catch (error) {
            this.addLog('‚ùå Â°´ÂÖÖËÆæÁΩÆË°®ÂçïÂ§±Ë¥•: ' + error.message, 'error');
        }
    }

    saveSettings() {
        try {
            // Êî∂ÈõÜË°®ÂçïÊï∞ÊçÆ
            const settings = {
                btc_conditions: {
                    volatility_threshold: parseFloat(document.getElementById('volatility-threshold').value) / 100,
                    growth_threshold: parseFloat(document.getElementById('growth-threshold').value) / 100,
                    kdj_threshold: parseFloat(document.getElementById('kdj-threshold').value)
                },
                doge_thresholds: {
                    oversold: [
                        parseFloat(document.getElementById('oversold-1').value),
                        parseFloat(document.getElementById('oversold-2').value),
                        parseFloat(document.getElementById('oversold-3').value),
                        parseFloat(document.getElementById('oversold-4').value)
                    ],
                    overbought: parseFloat(document.getElementById('overbought').value)
                },
                monitoring: {
                    update_interval: parseInt(document.getElementById('update-interval').value)
                }
            };

            // ÂèëÈÄÅÂà∞ÊúçÂä°Âô®
            fetch('/api/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(settings)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    this.addLog('‚úÖ ËÆæÁΩÆ‰øùÂ≠òÊàêÂäüÔºÅ', 'success');
                    this.closeSettingsModal();

                    // Â¶ÇÊûúÊõ¥Êñ∞‰∫ÜÁõëÊéßÈó¥ÈöîÔºåÊèêÁ§∫ÈáçÂêØÁõëÊéß
                    if (settings.monitoring.update_interval !== this.lastUpdateInterval) {
                        this.addLog('üîÑ ÁõëÊéßÈó¥ÈöîÂ∑≤Êõ¥Êñ∞ÔºåÈáçÂêØÁõëÊéß‰ª•ÁîüÊïà', 'info');
                        this.lastUpdateInterval = settings.monitoring.update_interval;
                    }
                } else {
                    this.addLog('‚ùå ‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•: ' + result.error, 'error');
                }
            })
            .catch(error => {
                this.addLog('‚ùå ‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•: ' + error.message, 'error');
            });

        } catch (error) {
            this.addLog('‚ùå Êî∂ÈõÜËÆæÁΩÆÊï∞ÊçÆÂ§±Ë¥•: ' + error.message, 'error');
        }
    }

    loadDefaultSettings() {
        // Âä†ËΩΩÈªòËÆ§ËÆæÁΩÆ
        const defaultSettings = {
            btc_conditions: {
                volatility_threshold: 3.0,   // 3%
                growth_threshold: 1.0,       // 1%
                kdj_threshold: 50
            },
            doge_thresholds: {
                oversold: [10, 15, 20, 20],
                overbought: 90
            },
            monitoring: {
                update_interval: 5
            }
        };

        this.populateSettingsForm(defaultSettings);
        this.addLog('üîÑ Â∑≤ÊÅ¢Â§çÈªòËÆ§ËÆæÁΩÆÔºàÊú™‰øùÂ≠òÔºâ', 'info');
    }
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
    window.tradingMonitor = new TradingMonitor();
});

// È°µÈù¢Âç∏ËΩΩÊó∂Ê∏ÖÁêÜ
window.addEventListener('beforeunload', () => {
    if (window.tradingMonitor && window.tradingMonitor.socket) {
        window.tradingMonitor.socket.disconnect();
    }
});